<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="VMS.TPS.Common.Model.Types" #>
<#@ import namespace="TMIAutomation.Language" #>
<#@ output extension =".txt" #>
<#= upperPlan.Course.Patient.FirstName #> <#= upperPlan.Course.Patient.LastName #> TMLI <#= treatmentDate.ToString("D") #>


<#= Resources.DisplacementsHeader #> <#= Resources.Body #>

<#= Resources.MostCaudalIsoFromMarkers #> <#= upperMarkersLocation #>: <#= Math.Abs(Math.Round(upperIsocenters.Last().z, 0)) / 10 #> cm
<#= Resources.Notes #>: ...
<#
for (int i = 0; i < upperIsocenters.Count; ++i)
{
VVector displacement = new VVector();
string explainDisp = string.Empty;
if (i == 0)
{
    displacement = upperIsocenters[i];
    explainDisp =  string.Join(" ", Resources.WrtMarkersNear, upperMarkersLocation, Resources.MoveBy);
}
else if (isocentersOnArms && i == upperIsocenters.Count - 1)
{
    /*
     * Skip isocenters on the arms to compute displacement
     * of last iso wrt previous iso along the body
     */
    displacement = upperIsocenters[i] - upperIsocenters[i - 3];
    explainDisp =  string.Join(" ", Resources.WrtIsocenter, i - 2, Resources.MoveBy); // i - 2 for correct iso number strating from 1
}
else
{
    displacement = upperIsocenters[i] - upperIsocenters[i - 1];
    explainDisp =  string.Join(" ", Resources.WrtIsocenter, i, Resources.MoveBy);
}
double roundedDispX = Math.Abs(Math.Round(displacement.x, 0)) / 10;
double roundedDispY = Math.Abs(Math.Round(displacement.y, 0)) / 10;
double roundedDispZ = Math.Abs(Math.Round(displacement.z, 0)) / 10;
#>

<#= Resources.Isocenter #> <#= i + 1 #>: <#= scheduleUpperPlanName[i] #>
    <#= explainDisp #>
<#
if (displacement.x > 0)
{
#>
        <#= roundedDispX #> cm <#= Resources.TowardLeftOfPatient #>
<#
}
else if (displacement.x < 0)
{
#>
        <#= roundedDispX #> cm <#= Resources.TowardRightOfPatient #>
<#
}
if (displacement.y > 0)
{
#>
        <#= roundedDispY #> cm <#= Resources.TowardBackOfPatient #>
<#
}
else if (displacement.y < 0)
{
#>
        <#= roundedDispY #> cm <#= Resources.TowardFrontOfPatient #>
<#
}
if (displacement.z > 0)
{
#>
        <#= roundedDispZ #> cm <#= Resources.TowardHeadOfPatient #>
<#
}
else if (displacement.z < 0)
{
#>
        <#= roundedDispZ #> cm <#= Resources.TowardFeetOfPatient #>
<#
}
if (isocentersOnArms && i == 2)
{
#>
    <#= Resources.IsoOnArmsMarkerWarning #>
<#
}
}
#>


<#= Resources.DisplacementsHeader #> <#= Resources.Legs #>

<#= Resources.MostCaudalIsoFromMarkers #> <#= lowerMarkersLocation #>: <#= Math.Abs(Math.Round(lowerIsocenters.Last().z, 0)) / 10 #> cm
<#= Resources.Notes #>: ...
<#
for (int i = 0; i < lowerIsocenters.Count; ++i)
{
VVector displacement = i == 0 ? lowerIsocenters[i] : lowerIsocenters[i] - lowerIsocenters[i - 1];
double roundedDispX = Math.Abs(Math.Round(displacement.x, 0)) / 10;
double roundedDispY = Math.Abs(Math.Round(displacement.y, 0)) / 10;
double roundedDispZ = Math.Abs(Math.Round(displacement.z, 0)) / 10;
string explainDisp = i == 0 ?
        string.Join(" ", Resources.WrtMarkersNear, lowerMarkersLocation, Resources.MoveBy)
        : string.Join(" ", Resources.WrtIsocenter, i + upperIsocenters.Count, Resources.MoveBy);
#>

<#= Resources.Isocenter #> <#= i + upperIsocenters.Count + 1 #>: <#= scheduleLowerPlanName[i] #>
    <#= explainDisp #>
<#
if (displacement.x > 0)
{
#>
        <#= roundedDispX #> cm <#= Resources.TowardRightOfPatient #>
<#
}
else if (displacement.x < 0)
{
#>
        <#= roundedDispX #> cm <#= Resources.TowardLeftOfPatient #>
<#
}
if (displacement.y > 0)
{
#>
        <#= roundedDispY #> cm <#= Resources.TowardBackOfPatient #>
<#
}
else if (displacement.y < 0)
{
#>
        <#= roundedDispY #> cm <#= Resources.TowardFrontOfPatient #>
<#
}
if (displacement.z > 0)
{
#>
        <#= roundedDispZ #> cm <#= Resources.TowardFeetOfPatient #>
<#
}
else if (displacement.z < 0)
{
#>
        <#= roundedDispZ #> cm <#= Resources.TowardHeadOfPatient #>
<#
}
}
#>